import streamlit as st
from database import HybridDB
from llm_helper import LLMHelper
from database_manager import DatabaseManager
import os
import uuid
import time

def get_session_id():
    if 'session_id' not in st.session_state:
        st.session_state.session_id = str(uuid.uuid4())
    return st.session_state.session_id

def main():
    st.title("Chat with RAG")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if 'db_manager' not in st.session_state:
        st.session_state.db_manager = DatabaseManager()
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Å–µ—Å—Å–∏–∏
    session_id = get_session_id()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø—Ä–æ—Å API –∫–ª—é—á–∞
    if "api_key" not in st.session_state:
        st.warning("üîë –¢—Ä–µ–±—É–µ—Ç—Å—è API –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ LLM")
        api_key = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à OpenAI API –∫–ª—é—á:", type="password")
        if st.button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–ª—é—á"):
            if api_key:
                try:
                    # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å LLM —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –∫–ª—é—á–æ–º
                    test_llm = LLMHelper(
                        base_url="https://llama3gpu.neuraldeep.tech/v1",
                        model="llama-3-8b-instruct-8k",
                        api_key=api_key
                    )
                    # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á
                    st.session_state.api_key = api_key
                    st.success("‚úÖ –ö–ª—é—á API –≤–µ—Ä–Ω—ã–π! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞...")
                    time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                    st.rerun()
                except Exception as e:
                    st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            else:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á")
        return
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    with st.sidebar:
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", key="clear_history"):
            st.session_state.db_manager.clear_chat_history(session_id)
            st.rerun()
            
        st.markdown("### –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞")
        history = st.session_state.db_manager.load_chat_history(session_id)
        for msg in reversed(history):
            if msg["role"] == "user":
                st.info(f"üë§ –í—ã: {msg['content']}")
            else:
                st.success(f"ü§ñ –ë–æ—Ç: {msg['content']}")
                if msg["doc_type"]:
                    st.caption(f"üìë –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {msg['doc_type']}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM —Å –∫–ª—é—á–æ–º
    if "llm" not in st.session_state:
        st.session_state.llm = LLMHelper(
            base_url="https://llama3gpu.neuraldeep.tech/v1",
            model="llama-3-8b-instruct-8k",
            api_key=st.session_state.api_key
        )
    
    if "db" not in st.session_state:
        st.session_state.db = HybridDB()
    
    # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–æ–ø—Ä–æ—Å–∞
    query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
    
    if query:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            previous_messages = st.session_state.db_manager.get_last_user_messages(session_id, limit=3)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            st.session_state.db_manager.save_message(session_id, "user", query)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            analysis = st.session_state.llm.analyze_query(query, previous_messages)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
            with st.sidebar:
                st.markdown("### –î–µ—Ç–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
                st.markdown(f"**–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å:**\n{query}")
                st.markdown(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:**\n{analysis['type']}")
                st.markdown(f"**–ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å:**\n{analysis['search_query']}")
            
            if analysis["type"] == "chat":
                answer = st.session_state.llm.generate_answer(
                    query,
                    analysis["search_query"],
                    ["–≠—Ç–æ –æ–±—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä –±–µ–∑ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"]
                )
                st.markdown(f"**–û—Ç–≤–µ—Ç:**\n\n{answer}")
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
                results = st.session_state.db.query(
                    query_text=analysis["search_query"],
                    doc_type=analysis["type"],
                    n_results=5
                )
                
                st.session_state.last_results = results
                
                if results['chroma_results'] or results['tfidf_results']:
                    all_contexts = []
                    for r in results['chroma_results']:
                        all_contexts.append(r['document'])
                    for r in results['tfidf_results']:
                        if r['document'] not in all_contexts:
                            all_contexts.append(r['document'])
                    
                    answer = st.session_state.llm.generate_answer(
                        query,
                        analysis["search_query"],
                        all_contexts
                    )
                else:
                    answer = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞—à–µ–ª —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
                st.session_state.db_manager.save_message(
                    session_id, "assistant", answer, analysis["type"]
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
                st.markdown(f"**–û—Ç–≤–µ—Ç:**\n\n{answer}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
                if hasattr(st.session_state, 'last_results') and (results['chroma_results'] or results['tfidf_results']):
                    with st.sidebar:
                        st.markdown("### –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")
                        
                        st.markdown("#### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã ChromaDB:")
                        for i, result in enumerate(results['chroma_results'], 1):
                            with st.expander(f"–î–æ–∫—É–º–µ–Ω—Ç {i} (score: {result['score']:.3f})"):
                                st.markdown(result['document'])
                        
                        st.markdown("#### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã TF-IDF:")
                        for i, result in enumerate(results['tfidf_results'], 1):
                            with st.expander(f"–î–æ–∫—É–º–µ–Ω—Ç {i} (score: {result['score']:.3f})"):
                                st.markdown(result['document'])
                
        except Exception as e:
            st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
            st.write("Debug - full error:", e)

if __name__ == "__main__":
    main()
