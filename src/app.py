import streamlit as st
from database import HybridDB
from llm_helper import LLMHelper
from database_manager import DatabaseManager
import uuid
import time
from config import Settings
from sound import AudioProcessor
from streamlit_mic_recorder import mic_recorder

settings = Settings.from_yaml("config.yaml")

if 'audio_state' not in st.session_state:
    st.session_state.audio_state = 'inactive'

def get_session_id():
    if 'session_id' not in st.session_state:
        st.session_state.session_id = str(uuid.uuid4())
    return st.session_state.session_id


def main():
    st.title("Chat with RAG")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if 'db_manager' not in st.session_state:
        st.session_state.db_manager = DatabaseManager()

    if 'audio_processor' not in st.session_state:
        st.session_state.audio_processor = AudioProcessor(model_name="base")

    # –ü–æ–ª—É—á–∞–µ–º ID —Å–µ—Å—Å–∏–∏
    session_id = get_session_id()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø—Ä–æ—Å API –∫–ª—é—á–∞
    if "api_key" not in st.session_state:
        st.warning("üîë –¢—Ä–µ–±—É–µ—Ç—Å—è API –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ LLM")
        api_key = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à OpenAI API –∫–ª—é—á:", type="password")
        if st.button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–ª—é—á"):
            if api_key:
                try:
                    # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å LLM —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –∫–ª—é—á–æ–º
                    test_llm = LLMHelper(
                        base_url=settings.url,
                        model=settings.model_name,
                        api_key=api_key
                    )
                    # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á
                    st.session_state.api_key = api_key
                    st.success("‚úÖ –ö–ª—é—á API –≤–µ—Ä–Ω—ã–π! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞...")
                    time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                    st.rerun()
                except Exception as e:
                    st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            else:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á")
        return

    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    with st.sidebar:
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", key="clear_history"):
            st.session_state.db_manager.clear_chat_history(session_id)
            # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —á–∞—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
            keys_to_clear = [
                'last_results',
                'chat_history',
                'voice_query',
                'voice_query_active',
                'recorder'  # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–∫–æ—Ä–¥–µ—Ä–∞
            ]
            for key in keys_to_clear:
                if key in st.session_state:
                    del st.session_state[key]
            st.success("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞!")

        st.markdown("### –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞")
        history = st.session_state.db_manager.load_chat_history(session_id)
        for msg in reversed(history):
            if msg["role"] == "user":
                st.info(f"üë§ –í—ã: {msg['content']}")
            else:
                st.success(f"ü§ñ –ë–æ—Ç: {msg['content']}")
                if msg["doc_type"]:
                    st.caption(f"üìë –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {msg['doc_type']}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM —Å –∫–ª—é—á–æ–º
    if "llm" not in st.session_state:
        st.session_state.llm = LLMHelper(
            base_url=settings.url,
            model=settings.model_name,
            api_key=st.session_state.api_key
        )

    if "db" not in st.session_state:
        st.session_state.db = HybridDB()

    # –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥
    st.markdown("### –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥")
    audio = mic_recorder(
        start_prompt="üé§",
        stop_prompt="‚èπÔ∏è",
        key="recorder"
    )

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ
    if audio and 'bytes' in audio:
        try:
            query_from_audio = st.session_state.audio_processor.transcribe_audio(audio['bytes'])
            if query_from_audio:
                st.session_state.voice_query = query_from_audio
                st.session_state.voice_query_active = True  # –§–ª–∞–≥ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞: {str(e)}")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_input –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤–≤–æ–¥–∞
    text_query = st.chat_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    if text_query:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥, –æ—Ç–∫–ª—é—á–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π
        st.session_state.voice_query_active = False
        query = text_query
    elif hasattr(st.session_state, 'voice_query_active') and st.session_state.voice_query_active:
        query = st.session_state.voice_query
        st.session_state.voice_query_active = False  # –û—Ç–∫–ª—é—á–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    else:
        query = None
    
    if query:
        try:
            previous_messages = st.session_state.db_manager.get_last_user_messages(session_id, limit=3)
            st.session_state.db_manager.save_message(session_id, "user", query)
            analysis = st.session_state.llm.analyze_query(query, previous_messages)

            with st.sidebar:
                st.markdown("### 1Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞")
                st.info(f"**–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å:**\n{query}")
                st.success(f"**–ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å:**\n{analysis['search_query']}")
                st.caption(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {analysis['query_type']}")

            if analysis["query_type"] == "chat":
                answer = st.session_state.llm.generate_chat_answer(query)
                st.markdown(f"**–û—Ç–≤–µ—Ç:**\n\n{answer}")
                st.session_state.db_manager.save_message(
                    session_id, "assistant", answer, analysis["query_type"]
                )
            else:
                n_results = 3
                if analysis["query_type"] in settings.finance_documents:
                    n_results = 6

                results = st.session_state.db.query(
                    query_text=analysis["search_query"],
                    doc_type=analysis["query_type"],
                    n_results=n_results,
                )

                if results['chroma_results'] or results['tfidf_results']:
                    all_contexts = []
                    
                    with st.sidebar:
                        st.markdown("### 2Ô∏è‚É£ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —á–∞–Ω–∫–∏")
                        
                        if results['chroma_results']:
                            st.markdown("#### ChromaDB:")
                            for i, r in enumerate(results['chroma_results'], 1):
                                with st.expander(f"–ß–∞–Ω–∫ {i} (score: {r['score']:.3f})"):
                                    st.markdown(r['document'])
                                all_contexts.append(r['document'])
                        
                        if results['tfidf_results']:
                            st.markdown("#### TF-IDF:")
                            for i, r in enumerate(results['tfidf_results'], 1):
                                if r['document'] not in all_contexts:
                                    with st.expander(f"–ß–∞–Ω–∫ {i} (score: {r['score']:.3f})"):
                                        st.markdown(r['document'])
                                    all_contexts.append(r['document'])

                    # –†–µ—Ä–∞–Ω–∫–∏–Ω–≥ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
                    reranking_results = st.session_state.llm.rerank_context(
                        analysis["search_query"], 
                        all_contexts
                    )
                    sorted_contexts = [res['context'] for res in reranking_results]

                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
                    answer = st.session_state.llm.generate_answer(
                        query,
                        analysis["search_query"],
                        sorted_contexts  # –ü–µ—Ä–µ–¥–∞–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
                    )

                    with st.sidebar:
                        st.markdown("### 3Ô∏è‚É£ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–µ—Ä–∞–Ω–∫–∏–Ω–≥–∞")
                        if reranking_results:
                            for rank in reranking_results:
                                with st.expander(f"üíØ –û—Ü–µ–Ω–∫–∞: {rank['score']:.2f} | –ö–æ–Ω—Ç–µ–∫—Å—Ç {rank['index']}"):
                                    st.info(f"**–ü—Ä–∏—á–∏–Ω–∞ –æ—Ü–µ–Ω–∫–∏:**\n{rank['explanation']}")
                                    st.success(f"**–ö–æ–Ω—Ç–µ–∫—Å—Ç:**\n{rank['context']}")
                        else:
                            st.warning("‚ö†Ô∏è –†–µ—Ä–∞–Ω–∫–∏–Ω–≥ –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!")

                    st.markdown("### –û—Ç–≤–µ—Ç:")
                    st.markdown(answer)

                else:
                    answer = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞—à–µ–ª —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
                    st.markdown(f"**–û—Ç–≤–µ—Ç:**\n\n{answer}")

                st.session_state.db_manager.save_message(
                    session_id, "assistant", answer, analysis["query_type"]
                )

        except Exception as e:
            st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
            st.write("Debug - full error:", e)

if __name__ == "__main__":
    main()
