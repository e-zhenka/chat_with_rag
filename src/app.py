import streamlit as st
from llm_helper import LLMHelper
from graph import Agent
from database_manager import DatabaseManager
import uuid
import time
from config import Settings

settings = Settings.from_yaml("config.yaml")


def get_session_id():
    if 'session_id' not in st.session_state:
        st.session_state.session_id = str(uuid.uuid4())
    return st.session_state.session_id


def main():
    st.title("Chat with RAG")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if 'db_manager' not in st.session_state:
        st.session_state.db_manager = DatabaseManager()

    # –ü–æ–ª—É—á–∞–µ–º ID —Å–µ—Å—Å–∏–∏
    session_id = get_session_id()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø—Ä–æ—Å API –∫–ª—é—á–∞
    if "api_key" not in st.session_state:
        st.warning("üîë –¢—Ä–µ–±—É–µ—Ç—Å—è API –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ LLM")
        api_key = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à OpenAI API –∫–ª—é—á:", type="password")
        if st.button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–ª—é—á"):
            if api_key:
                try:
                    # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å LLM —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –∫–ª—é—á–æ–º
                    test_llm = LLMHelper(
                        base_url=settings.url,
                        model=settings.model_name,
                        api_key=api_key
                    )
                    # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á
                    st.session_state.api_key = api_key
                    st.success("‚úÖ –ö–ª—é—á API –≤–µ—Ä–Ω—ã–π! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞...")
                    time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                    st.rerun()
                except Exception as e:
                    st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            else:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á")
        return

    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    with st.sidebar:
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", key="clear_history"):
            st.session_state.db_manager.clear_chat_history(session_id)
            if 'last_results' in st.session_state:
                del st.session_state.last_results
            st.success("–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞!")
            # pass

        st.markdown("### –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞")
        history = st.session_state.db_manager.load_chat_history(session_id)
        for msg in reversed(history):
            if msg["role"] == "user":
                st.info(f"üë§ –í—ã: {msg['content']}")
            else:
                st.success(f"ü§ñ –ë–æ—Ç: {msg['content']}")
                if msg["doc_type"]:
                    st.caption(f"üìë –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {msg['doc_type']}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM —Å –∫–ª—é—á–æ–º
    if "agent" not in st.session_state:
        st.session_state.agent = Agent(
            api_key=st.session_state.api_key
        )

    query = st.chat_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")

    if query:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            previous_messages = st.session_state.db_manager.get_last_user_messages(session_id, limit=3)
            # previous_messages = []

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            st.session_state.db_manager.save_message(session_id, "user", query)

            result = st.session_state.agent(query, previous_messages)
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            if result['image_path'] != '':
                st.image(result['image_path'], caption="–ì—Ä–∞—Ñ–∏–∫")

            st.markdown(f"**–û—Ç–≤–µ—Ç:**\n\n{result['output']}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
            with st.sidebar:
                st.markdown("### –î–µ—Ç–∞–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
                st.markdown(f"**–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å:**\n{query}")
                st.markdown(f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:**\n{result['category']}")
                st.markdown(f"**–ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å:**\n{result['search_query']}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
                st.session_state.db_manager.save_message(
                    session_id, "assistant", result['output'], result['category']
                )

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
                if result['chroma_results'] or result['tfidf_results']:
                    with st.sidebar:
                        st.markdown("### –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")

                        st.markdown("#### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã ChromaDB:")
                        for i, context in enumerate(result['chroma_results'], 1):
                            with st.expander(f"–î–æ–∫—É–º–µ–Ω—Ç {i}"):
                                st.markdown(context['document'])

                        st.markdown("#### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã TF-IDF:")
                        for i, context in enumerate(result['tfidf_results'], 1):
                            with st.expander(f"–î–æ–∫—É–º–µ–Ω—Ç {i}"):
                                st.markdown(context['document'])

        except Exception as e:
            st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
            st.write("Debug - full error:", e)


if __name__ == "__main__":
    main()
